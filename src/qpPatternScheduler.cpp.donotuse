#include "qpPatternScheduler.h"

/*--------
Private
*/

bool qpPatternController::patternShouldActivate() {

    if(this->patternIsActive)
        return false;

    if(this->ticksUntilNextActivation > 0) {
        this->ticksUntilNextActivation--;
        return false;
    }

    this->resetActivationTimer();

    return true;
}

/*
quickPatterns.samePattern().applyConfig(usePalette(RainbowColors_p)).everyNActivations(3);
*/

bool qpPatternController::patternShouldDeactivate() {

    if((*this->activePeriodsCounter - this->periodCountAtLastActivation) >= this->currentPeriodsToStayActive)
        return true;

    return false;
}


/*--------
Public
*/

bool qpPatternController::render() {

    if(this->patternShouldActivatePeriodically) {
        if(this->patternShouldActivate()) {
            this->activate();
        }
    }

    if(this->patternIsActive) {
        if(this->ticks == this->nextRenderTick) {
            this->pattern->render();
            this->nextRenderTick += this->ticksBetweenFrames;                    
        }

        this->ticks++;

        if(this->patternShouldActivatePeriodically) {
            if(this->patternShouldDeactivate()) {
                this->deactivate();
            }
        }

        return true;
    }

    return false;
}

qpPatternController &qpPatternController::drawEveryNTicks(int ticks) {
    this->ticksBetweenFrames = ticks;

    if(this->nextRenderTick == 0)
        this->nextRenderTick += this->ticksBetweenFrames;

    return *this;
}

bool qpPatternController::activate() {

    // If we are only activating with a chance, check that here
    if(this->chanceToActivatePattern > 0) {
        if(random16(100) > this->chanceToActivatePattern) {
        return false;
        }
    }

    // If we are staying active for a random period count, set it here
    if(this->maxPeriodsToStayActive)
        this->currentPeriodsToStayActive = random16(this->minPeriodsToStayActive, this->maxPeriodsToStayActive);

    this->periodCountAtLastActivation = *this->activePeriodsCounter;

    this->pattern->activate();

    this->patternIsActive = true;

    return true;
}

